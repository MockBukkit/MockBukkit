plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'maven-publish'
    id 'signing'
}


repositories {
    mavenCentral()

    maven {
        url 'https://hub.spigotmc.org/nexus/content/repositories/public/'
    }

    maven {
        url 'https://repo.md-5.net/content/groups/public/'
    }
}

dependencies {
    api "org.spigotmc:spigot-api:${gradle.ext.apiVersionFull}"
    implementation 'org.junit.jupiter:junit-jupiter:5.7.1'
    implementation 'org.hamcrest:hamcrest-library:1.3'
    implementation 'org.apache.commons:commons-io:1.3.2'
    implementation 'org.jetbrains:annotations:19.0.0'
}

task javadocJar(type: Jar) {
    classifier('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier('sources')
    from sourceSets.main.allSource
}

tasks.withType(JavaCompile) {
    Provider<JavaCompiler> compilerProvider = javaToolchains.compilerFor {
        JavaLanguageVersion.of(8)
    }
    JavaCompiler compiler = compilerProvider.orNull

    if (compiler != null && compiler.metadata.languageVersion.asInt() > 9) {
        // Mark release as 8 if the compiler is Java 10 or newer
        options.release.set(8)
    } else {
        // Only use the legacy compiler options otherwise
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

def isFork = isFork()

signing {
    required { !isFork && System.getenv('JITPACK') == null }
    sign publishing.publications
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

jacoco {
	toolVersion = "0.8.6"
}

group = 'com.github.seeseemelk'
version = gradle.ext.version

publishing {
    publications {
        mockBukkit(MavenPublication) {
            artifactId = "MockBukkit-v${gradle.ext.apiVersion}"
            from components.java

            artifact sourcesJar
            artifact javadocJar
            pom {
                name = "MockBukkit-v${gradle.ext.apiVersion}"
                packaging = 'jar'
                description = 'MockBukkit is a mocking framework for bukkit to allow the easy unit testing of Bukkit plugins.'
                url = 'https://github.com/MockBukkit/MockBukkit'
                scm {
                    connection = 'scm:git:git://github.com/MockBukkit/MockBukkit.git'
                    developerConnection = 'scm:git:ssh://github.com:MockBukkit/MockBukkit.git'
                    url = "https://github.com/MockBukkit/MockBukkit/tree/v${gradle.ext.apiVersion}"
                }
                licenses {
                    license {
                        name = 'MIT License'
                        url = "https://github.com/MockBukkit/MockBukkit/blob/v${gradle.ext.apiVersion}/LICENSE"
                    }
                }
                developers {
                    developer {
                        id = 'seeseemelk'
                        name = 'Sebastiaan de Schaetzen'
                        email = 'sebastiaan.de.schaetzen@gmail.com'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'repository'
            url = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
        maven {
            name = 'snapshotRepository'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
            credentials {
                username = findProperty('ossrhUsername')
                password = findProperty('ossrhPassword')
            }
        }
    }
}

eclipse.classpath.downloadJavadoc = true
eclipse.classpath.downloadSources = true

def isFork() {
    try {
        def workingDir = new File("${project.projectDir}")
        def result = 'git config --get remote.origin.url'.execute(null, workingDir)
        result.waitFor()
        if (result.exitValue() == 0) {
            return !result.text.contains("MockBukkit/MockBukkit")
        }
    } catch (e) {
    }
    return true
}
